turbomem - Linux driver for Intel(R) Turbo Memory Controller


This is the development of a reverse-engineered Linux driver for the Intel(R)
Turbo Memory Controller, a mini-PCIe board that contains NAND flash and a
controller chip. This driver will expose the flash memory to the Linux MTD
(Memory Technology Device) layer, which in turn can setup filesystems on top.

After detecting a compatible device, basic info is logged to dmesg:
turbomem 0000:04:00.0: Found Intel Turbo Memory Controller (rev 11)
turbomem 0000:04:00.0: Device characteristics: 13404, flash size: 2048 MB


Notes:
------
* The supplied Vista driver requires certain SATA controller chips to install
  and work. Since this driver does no disk filtering hopefully the Turbo Memory
  will work in any board with a mini-PCIe connector.

* If you use both Linux and Windows on the computer with this card, uninstall
  the Turbo Memory driver in Windows before using this driver. Data on the card
  will be corrupted otherwise since both drivers do not use it in the same way.

* This driver is developed using the 2GB version of the board. If the 1 and 4GB
  versions use the same flash layout they should also work, otherwise some
  adjustment will be needed. Get in touch if you run into problems.


Enjoy,
    Erik Ekman <erik@kryo.se>

================================================================================

Current status:
Erasing, writing and reading works.
However, an error is returned when trying to read a sector that has been
written twice since erased.

Example session:

# modprobe mtd
# insmod turbomem.ko
# cat /proc/mtd
dev:    size   erasesize  name
mtd0: 7ffc0000 00040000 "TurboMemory@0000:04:00.0"
# flash_erase  /dev/mtd0 0 10
Erasing 128 Kibyte @ 120000 -- 100 % complete
# nanddump /dev/mtd0 -l 8192 |hexdump -C
ECC failed: 0
ECC corrected: 0
Number of bad blocks: 0
Number of bbt blocks: 0
Block size 262144, page size 4096, OOB size 0
Dumping data starting at 0x00000000 and ending at 0x00002000...
00000000  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  |................|
*
00002000
# echo "faaaaao foo foo 22"|nandwrite -p  /dev/mtd0
Writing data to block 0 at offset 0x0
# nanddump /dev/mtd0 -l 8192 |hexdump -C
ECC failed: 0
ECC corrected: 0
Number of bad blocks: 0
Number of bbt blocks: 0
Block size 262144, page size 4096, OOB size 0
Dumping data starting at 0x00000000 and ending at 0x00002000...
00000000  66 61 61 61 61 61 6f 20  66 6f 6f 20 66 6f 6f 20  |faaaaao foo foo |
00000010  32 32 0a ff ff ff ff ff  ff ff ff ff ff ff ff ff  |22..............|
00000020  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  |................|
*
00002000
#

================================================================================

Debugfs interface:

* /turbomem/<pci-addr>/orom (read)
  Dump the embedded disk-filtering Option ROM
  Example:

# hexdump -C /sys/kernel/debug/turbomem/0000:04:00.0/orom
00000000  55 aa 18 e9 2a 29 3f 3f  3f 3f 3f 3f 3f 3f 3f 3f  |U...*)??????????|
00000010  3f 3f 3f 3f 3f 3f 3f b9  70 00 20 00 00 00 00 00  |???????.p. .....|
00000020  24 50 6e 50 01 02 00 00  00 d6 00 00 00 00 40 00  |$PnP..........@.|
00000030  4c 00 05 80 00 e4 00 00  00 00 00 00 00 00 00 00  |L...............|
00000040  49 6e 74 65 6c 20 43 6f  72 70 2e 00 49 6e 74 65  |Intel Corp..Inte|
00000050  6c 28 52 29 20 54 75 72  62 6f 20 4d 65 6d 6f 72  |l(R) Turbo Memor|
00000060  79 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |y...............|
00000070  50 43 49 52 86 80 4e 44  00 00 18 00 00 05 80 00  |PCIR..ND........|
00000080  18 00 ea 03 00 80 00 00  00 00 00 00 00 00 00 00  |................|
00000090  46 49 4c 54 2e 12 01 01  01 00 0a 00 01 00 ea 03  |FILT............|
.... and so on.


* /turbomem/<pci-addr>/wipe_flash (write)
  Write anything here to erase the flash memory. Watch out.
  Example:

# echo 1 > /sys/kernel/debug/turbomem/0000:04:00.0/wipe_flash
turbomem 0000:04:00.0: Wiping flash!
turbomem 0000:04:00.0: Erase complete: 102 of 16384 blocks failed.

